


@startuml

' Класс Пользователь
class Пользователь {
    - id: int
    - имя: string
    - карта: БанковскаяКарта
    + оплатить(pos: POSTерминал, сумма: float)
}

' Класс БанковскаяКарта
class БанковскаяКарта {
    - номер: string
    - срокДействия: Date
    - cvc: int
    - банкВыпускающий: Банк
    - владелец: Пользователь
}

' Класс Банк
class Банк {
    - id: int
    - название: string
    - списокСчетов: List<Счет>
    + проверитьБаланс(карта: БанковскаяКарта, сумма: float): bool
    + списатьСредства(счет: Счет, сумма: float)
    + зачислитьСредства(счет: Счет, сумма: float)
}

' Класс Счет
class Счет {
    - номер: string
    - баланс: float
    - владелец: string
}

' Класс POSTерминал
class POSTерминал {
    - id: int
    - банкВладелец: Банк
    - магазин: Магазин
    + провестиТранзакцию(карта: БанковскаяКарта, сумма: float)
}

' Класс Магазин
class Магазин {
    - id: int
    - название: string
    - счет: Счет
}

' Класс ПлатежнаяСистема
class ПлатежнаяСистема {
    - id: int
    - название: string
    + обработатьПлатеж(карта: БанковскаяКарта, сумма: float, магазин: Магазин)
}

' Ассоциации и агрегации
Пользователь "1" -- "1" БанковскаяКарта : владеет >
БанковскаяКарта "1" -- "1" Банк : принадлежит >
БанковскаяКарта "1" -- "1" POSTерминал : взаимодействует >
POSTерминал "1" -- "1" Магазин : установлен в >
POSTерминал "1" -- "1" ПлатежнаяСистема : отпраляет запрос в >
POSTерминал "1" -- "1" Банк : отправляет запрос в >
Магазин "1" -- "1" Счет : имеет >
Банк "1" o-- "*" Счет : обслуживает >
ПлатежнаяСистема --> Банк : отправляет запрос в 
ПлатежнаяСистема --> Магазин : зачисляет средства

@enduml



Деятельности
@startuml
actor Пользователь
participant "POS-терминал" as POS
participant "Платежная система" as Gateway
participant "Банк пользователя" as UserBank
participant "Банк магазина" as ShopBank
participant "Счет магазина" as ShopAccount

Пользователь -> POS : вставляет карту / вводит данные
POS -> Gateway : инициировать транзакцию (сумма, карта)
Gateway -> UserBank : запрос баланса
UserBank -> Gateway : достаточно средств / отказ
alt достаточно средств
    Gateway -> UserBank : списать сумму
    UserBank -> Gateway : подтверждение списания
    Gateway -> ShopBank : зачислить сумму
    ShopBank -> ShopAccount : пополнение
    ShopBank -> Gateway : подтверждение
    Gateway -> POS : транзакция успешна
    POS -> Пользователь : выдать чек / завершение
else недостаточно средств
    Gateway -> POS : транзакция отклонена
    POS -> Пользователь : ошибка оплаты
end
@enduml
